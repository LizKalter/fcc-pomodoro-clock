{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","defaultState","breakLength","sessionLength","isPaused","isInSession","timeLeft","timer","incrementBreak","state","decrementBreak","incrementSession","decrementSession","incrementTimer","store","createStore","action","type","Object","assign","clearInterval","isReset","applyMiddleware","thunk","ConnectedBreak","connect","dispatch","props","className","id","onClick","ConnectedSession","ConnectedBeep","beep","useRef","current","paused","pause","currentTime","play","src","ref","ConnectedTimer","pauseTimer","startTimer","setInterval","minutes","Math","floor","seconds","prettyMinutes","prettySeconds","ConnectedResetButton","reset","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9c56860.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst INCREMENT_BREAK = 'INCREMENT_BREAK';\nconst DECREMENT_BREAK = 'DECREMENT_BREAK';\nconst INCREMENT_SESSION = 'INCREMENT_SESSION';\nconst DECREMENT_SESSION = 'DECREMENT_SESSION';\nconst RESET = 'RESET';\nconst PAUSE_TIMER = 'PAUSE_TIMER';\nconst START_TIMER = 'START_TIMER';\nconst TICK = 'TICK';\n\nconst defaultState = {\n\tbreakLength: 5,\n\tsessionLength: 25,\n\tisPaused: true,\n\tisInSession: true,\n\ttimeLeft: 1500 // 25 * 60\n}\n\nlet timer = null;\n\nconst tick = () => { return { type: TICK }};\n\nconst incrementBreak = (state) => {\n\tif (state.breakLength < 60) {\n\t\tif (state.isInSession) {\n\t\t\treturn {\n\t\t\t\tbreakLength: state.breakLength + 1\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tbreakLength: state.breakLength + 1,\n\t\t\t\ttimeLeft: state.timeLeft + 60\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tbreakLength: state.breakLength\n\t\t}\n\t}\n}\n\nconst decrementBreak = (state) => {\n\tif (state.breakLength > 1) {\n\t\tif (state.isInSession) {\n\t\t\treturn {\n\t\t\t\tbreakLength: state.breakLength - 1\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tbreakLength: state.breakLength - 1,\n\t\t\t\ttimeLeft: state.timeLeft - 60\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tbreakLength: state.breakLength\n\t\t}\n\t}\n}\n\nconst incrementSession = (state) => {\n\tif (state.sessionLength < 60) {\n\t\tif (state.isInSession) {\n\t\t\treturn {\n\t\t\t\tsessionLength: state.sessionLength + 1,\n\t\t\t\ttimeLeft: state.timeLeft + 60\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tsessionLength: state.sessionLength + 1\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tsessionLength: state.sessionLength\n\t\t}\n\t}\n}\n\nconst decrementSession = (state) => {\n\tif (state.sessionLength > 1) {\n\t\tif (state.isInSession) {\n\t\t\treturn {\n\t\t\t\tsessionLength: state.sessionLength - 1,\n\t\t\t\ttimeLeft: state.timeLeft - 60\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tsessionLength: state.sessionLength - 1\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tsessionLength: state.sessionLength\n\t\t}\n\t}\n}\n\n/* https://medium.com/@machadogj/timers-in-react-with-redux-apps-9a5a722162e8 */\nconst startTimer = () => (dispatch) => {\n\tclearInterval(timer);\n\ttimer = setInterval(() => dispatch(tick()), 1000);\n\tdispatch({ type: START_TIMER });\n}\n\nconst pauseTimer = () => {\n\tclearInterval(timer);\n\treturn { type: PAUSE_TIMER };\n}\n\nconst incrementTimer = (state) => {\n\tif (state.timeLeft === 0) {\n\t\tif (state.isInSession) {\n\t\t\treturn {\n\t\t\t\tisInSession: false,\n\t\t\t\ttimeLeft: state.breakLength * 60\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tisInSession: true,\n\t\t\t\ttimeLeft: state.sessionLength * 60\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn { timeLeft: state.timeLeft - 1 };\n\t}\n}\n\nconst reducer = (state = defaultState, action) => {\n\tswitch(action.type) {\n\t\tcase INCREMENT_BREAK:\n\t\t\treturn Object.assign({}, state, incrementBreak(state));\n\t\tcase DECREMENT_BREAK:\n\t\t\treturn Object.assign({}, state, decrementBreak(state));\n\t\tcase INCREMENT_SESSION:\n\t\t\treturn Object.assign({}, state, incrementSession(state));\n\t\tcase DECREMENT_SESSION:\n\t\t\treturn Object.assign({}, state, decrementSession(state));\n\t\tcase RESET:\n\t\t\tclearInterval(timer);\n\t\t\treturn Object.assign({}, defaultState, { isReset: !state.isReset });\n\t\tcase PAUSE_TIMER:\n\t\t\treturn Object.assign({}, state, { isPaused: true });\n\t\tcase START_TIMER:\n\t\t\treturn Object.assign({}, state, { isPaused: false, isReset: false });\n\t\tcase TICK:\n\t\t\treturn Object.assign({}, state, incrementTimer(state));\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nfunction Break(props) {\n\treturn (\n\t\t<div className=\"break\">\n\t\t\t<div id=\"break-label\">Break Length</div>\n\t\t\t<button id=\"break-decrement\" onClick={props.decrementBreak}>-</button>\n\t\t\t<span id=\"break-length\">{props.breakLength}</span>\n\t\t\t<button id=\"break-increment\" onClick={props.incrementBreak}>+</button>\n\t\t</div>\n\t);\n}\nconst ConnectedBreak = connect(\n\tfunction(state) {\n\t\treturn { breakLength: state.breakLength }\n\t}, \n\tfunction(dispatch) {\n\t\treturn {\n\t\t\tincrementBreak: function() {\n\t\t\t\tdispatch({ type: INCREMENT_BREAK });\n\t\t\t},\n\t\t\tdecrementBreak: function() {\n\t\t\t\tdispatch({ type: DECREMENT_BREAK });\n\t\t\t}\n\t\t}\n\t}\n)(Break);\n\nfunction Session(props) {\n\treturn (\n\t\t<div className=\"session\">\n\t\t\t<div id=\"session-label\">Session Length</div>\n\t\t\t<button id=\"session-decrement\" onClick={props.decrementSession}>-</button>\n\t\t\t<span id=\"session-length\">{props.sessionLength}</span>\n\t\t\t<button id=\"session-increment\" onClick={props.incrementSession}>+</button>\n\t\t</div>\n\t);\n}\nconst ConnectedSession = connect(\n\tfunction(state) {\n\t\treturn { sessionLength: state.sessionLength }\n\t},\n\tfunction(dispatch) {\n\t\treturn {\n\t\t\tincrementSession: function() {\n\t\t\t\tdispatch({ type: INCREMENT_SESSION });\n\t\t\t},\n\t\t\tdecrementSession: function() {\n\t\t\t\tdispatch({ type: DECREMENT_SESSION });\n\t\t\t}\n\t\t}\n\t}\n)(Session);\n\n/* Beep audio file from the freeCodeCamp example for this project. */\nfunction Beep(props) {\n\tconst beep = useRef(null);\n\tif (beep.current != null) {\n\t\tif (props.timeLeft === 0 && !props.isReset) {\n\t\t\tbeep.current.play();\n\t\t} else if (props.isReset && !beep.current.paused) {\n\t\t\tbeep.current.pause();\n\t\t\tbeep.current.currentTime = 0;\n\t\t}\n\t}\n\t\n\treturn (\n\t\t<audio id=\"beep\" src=\"https://goo.gl/65cBl1\" ref={beep} />\n\t)\n}\nconst ConnectedBeep = connect(\n\tfunction(state) {\n\t\treturn {\n\t\t\ttimeLeft: state.timeLeft,\n\t\t\tisReset: state.isReset\n\t\t}\n\t},\n\tnull\n)(Beep);\n\nfunction Timer(props) {\n\t/* https://stackoverflow.com/questions/3733227/javascript-seconds-to-minutes-and-seconds */\n\tconst minutes = Math.floor(props.timeLeft / 60);\n\tconst seconds = props.timeLeft % 60;\n\tconst prettyMinutes = minutes < 10 ? '0' + minutes : minutes;\n\tconst prettySeconds = seconds < 10 ? '0' + seconds : seconds;\n\treturn (\n\t\t<div className=\"timer\">\n\t\t\t<div id=\"timer-label\">{props.isInSession ? 'Session' : 'Break'}</div>\n\t\t\t<div id=\"time-left\">{prettyMinutes}:{prettySeconds}</div>\n\t\t\t<button id=\"start_stop\" onClick={props.isPaused ? props.startTimer : props.pauseTimer}>{props.isPaused ? 'Start' : 'Stop'}</button>\n\t\t\t<ConnectedBeep />\n\t\t</div>\n\t);\n}\nconst ConnectedTimer = connect(\n\tfunction(state) {\n\t\treturn {\n\t\t\ttimeLeft: state.timeLeft,\n\t\t\tisPaused: state.isPaused,\n\t\t\tisInSession: state.isInSession\n\t\t}\n\t},\n\tfunction(dispatch) {\n\t\treturn {\n\t\t\tpauseTimer: function() {\n\t\t\t\tdispatch(pauseTimer());\n\t\t\t},\n\t\t\tstartTimer: function() {\n\t\t\t\tdispatch(startTimer());\n\t\t\t}\n\t\t}\n\t}\n)(Timer);\n\nfunction ResetButton(props) {\n\treturn (\n\t\t<button id=\"reset\" onClick={props.reset}>Reset</button>\n\t);\n}\nconst ConnectedResetButton = connect(\n\tnull, \n\tfunction(dispatch) {\n\t\treturn {\n\t\t\treset: function() {\n\t\t\t\tdispatch({ type: RESET });\n\t\t\t}\n\t\t}\n\t}\n)(ResetButton);\n\nfunction PomodoroClock() {\n\treturn (\n\t\t<div className=\"pomodoro-clock\">\n\t\t\t<ConnectedBreak />\n\t\t\t<ConnectedSession />\n\t\t\t<ConnectedTimer />\n\t\t\t<ConnectedResetButton />\n\t\t</div>\n\t);\n}\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<PomodoroClock />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}